name: Version Consistency Check

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  version_check:
    name: Check Version Consistency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to access releases

      - name: Extract code version from header
        id: code_version
        run: |
          CODE_VERSION=$(grep '#define ARGPARSE_VERSION ' include/argparse/argparse.hpp | sed 's/#define ARGPARSE_VERSION "\(.*\)"/\1/')
          echo "version=$CODE_VERSION" >> $GITHUB_OUTPUT
          echo "Code version: $CODE_VERSION"

      - name: Get latest published release
        id: latest_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest published release (not drafts)
          LATEST_RELEASE=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft == false) | .tag_name' | head -1)
          
          if [ -n "$LATEST_RELEASE" ]; then
            # Remove 'v' prefix if it exists
            LATEST_VERSION=${LATEST_RELEASE#v}
            
            echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "tag=$LATEST_RELEASE" >> $GITHUB_OUTPUT
            echo "Latest released version: $LATEST_VERSION (tag: $LATEST_RELEASE)"
          else
            echo "No published releases found"
            echo "version=" >> $GITHUB_OUTPUT
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      - name: Compare versions
        run: |
          CODE_VERSION="${{ steps.code_version.outputs.version }}"
          RELEASE_VERSION="${{ steps.latest_release.outputs.version }}"
          RELEASE_TAG="${{ steps.latest_release.outputs.tag }}"
          
          echo "=== Version Comparison ==="
          echo "Code version:     $CODE_VERSION"
          echo "Released version: $RELEASE_VERSION"
          echo "Release tag:      $RELEASE_TAG"
          
          if [ -z "$RELEASE_VERSION" ]; then
            echo "ℹ️  No published releases found."
            echo "This is expected for new projects or when preparing the first release."
            echo "Current code version: v$CODE_VERSION"
            echo "✅ Version check passed."
            exit 0
          fi
          
          # Use sort -V for version comparison (handles semantic versioning properly)
          if [ "$CODE_VERSION" = "$RELEASE_VERSION" ]; then
            echo "ℹ️  Code version matches the latest release."
            echo "No new release will be created automatically."
            echo "✅ Version consistency maintained."
          elif printf '%s\n%s\n' "$RELEASE_VERSION" "$CODE_VERSION" | sort -V -C; then
            echo "🚀 Code version is newer than the latest release!"
            echo "Previous: v$RELEASE_VERSION → Current: v$CODE_VERSION"
            echo "A new release will be created automatically when merged to main."
            echo "✅ Version update detected."
          else
            echo "⚠️  Code version appears to be older than the latest release."
            echo "Released: v$RELEASE_VERSION, Code: v$CODE_VERSION"
            echo "This might indicate a rollback or versioning issue."
            echo "Please verify the version numbers are correct."
            echo ""
            echo "Code version locations to check:"
            echo "- include/argparse/argparse.hpp (line ~12 comment and line ~36 macro)"
            echo "- tests/unit/basic_structure_test.cpp (expected values in test)"
            echo ""
            echo "⚠️  Version check completed with warnings."
          fi

      - name: Summary
        if: always()
        run: |
          CODE_VERSION="${{ steps.code_version.outputs.version }}"
          RELEASE_VERSION="${{ steps.latest_release.outputs.version }}"
          
          echo "## Version Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code | \`$CODE_VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Latest Release | \`${RELEASE_VERSION:-"None"}\` |" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$RELEASE_VERSION" ]; then
            if [ "$CODE_VERSION" = "$RELEASE_VERSION" ]; then
              echo "| Status | ℹ️  Same Version |" >> $GITHUB_STEP_SUMMARY
            elif printf '%s\n%s\n' "$RELEASE_VERSION" "$CODE_VERSION" | sort -V -C; then
              echo "| Status | 🚀 New Version |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Status | ⚠️  Potential Rollback |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Status | ✅ Ready for First Release |" >> $GITHUB_STEP_SUMMARY
          fi